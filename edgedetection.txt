from helper_functions import *

#-----------------------FILL IN THE FOLDER WHERE YOUR IMAGE EXISTS--------------------------
datafolder = "C:/Users/MONICA.G/Downloads/assgn1code/images/"
imgpath = datafolder + "1.jpg" 
#----------------------------------------STARTER CODE----------------------------------------
# Convert the color image to grayscale and returns the grayscale pixels 
pixel_values = read_colorimg(imgpath)
# The returned pixel values INCLUDE 2 boundary rows and 2 boundary colns. Therefore,
numb_rows = len(pixel_values) - 2
numb_colns = len(pixel_values[0]) - 2
#
#----------------------------------------WRITE YOUR CODE HERE----------------------------------------
# Create a data structure to store updated pixel information
n_rows=numb_rows
n_colns=numb_colns
new_pixel_values=[[0 for i in range(n_colns)]for j in range(n_rows)]
# Define the 3 x 3 mask as a tuple of tuples
mask = ((-1,0,1), (-2,0,2), (-1,0,1))

# Implement a function to slice a part from the image as a 2D list
def get_slice_2d_list(pixel_values,i,j):
   return [row[j-1:j+2] for row in pixel_values[i-1:i+2]]
     

# Implement a function to flatten a 2D list or a 2D tuple
def flatten(L):
     return [j  for i in L for j in i]

# For each of the pixel values, excluding the boundary values
    # Create little local 3x3 box using list slicing


for i in range(1,n_rows+1):
    new_pixels_values_i=[]
    for j in range(1,n_colns+1):
        # Create little local 3x3 box using list slicing
        neighbour_pixels = get_slice_2d_list(pixel_values, i, j)
        img_flat = flatten(neighbour_pixels)
        # Apply the mask
        mask_flat = flatten(mask)
        m_flat=mask_flat
        # Sum all the multiplied values and set the new pixel value
        mul_result=list(map(lambda a,b:a*b ,img_flat,m_flat))
        sum_result=sum(mul_result)
        new_pixel_values[i-1][j-1]=sum_result
        
#        
#----------------------------------------END YOUR CODE HERE----------------------------------------
# Verify your result
verify_result(pixel_values, new_pixel_values, mask)
# View the original image and the edges of the image
view_images(imgpath, new_pixel_values)
